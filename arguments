In shell scripting, you use variables within conditional statements to control the flow of your script based on the values stored in those variables.

Here's how variables are typically used in conditions:

1. Comparisons:

Equality:

Bash

if [ "$variable1" == "$variable2" ]; then
    # Code to execute if variable1 is equal to variable2
fi
Inequality:

Bash

if [ "$variable1" != "$variable2" ]; then
    # Code to execute if variable1 is not equal to variable2
fi
Numerical Comparisons:

Bash

if [ "$variable1" -gt "$variable2" ]; then 
    # Code to execute if variable1 is greater than variable2
fi
(Use -lt for less than, -ge for greater than or equal to, -le for less than or equal to, -eq for equal to, and -ne for not equal to for numerical comparisons)

2. String Comparisons:

Check if a string is empty:

Bash

if [ -z "$variable" ]; then
    # Code to execute if the variable is empty
fi
Check if a string is not empty:

Bash

if [ -n "$variable" ]; then
    # Code to execute if the variable is not empty
fi
3. File Tests:

Check if a file exists:
Bash

if [ -f "$filename" ]; then
    # Code to execute if the file exists
fi
(Use -d for directories, -e for existence of any file type, -x for executable files, etc.)
Key Considerations:

Quoting: Always quote your variables within the [ and ] brackets to prevent unexpected behavior, especially if the variable might contain spaces or special characters.
Spacing: Maintain proper spacing around operators and variables for readability.
Logical Operators: Combine multiple conditions using logical operators like && (and), || (or), and ! (not).
Example:

Bash

#!/bin/bash

user_input="yes"

if [ "$user_input" == "yes" ]; then
    echo "User entered 'yes'."
else
    echo "User did not enter 'yes'."
fi
